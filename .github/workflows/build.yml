# This workflow builds the Flipper Application (FAP) against multiple
# firmware SDKs to ensure compatibility. It then creates a single
# GitHub Release containing all the compiled .fap files.

name: "FAP: Build for multiple SDK sources"

on:
  push:
    branches:
      - main
  pull_request:
  schedule:
    # Run once a day at 01:01 UTC
    - cron: "1 1 * * *"

# Ensures that only one workflow run for a given branch/ref is running at a time.
# If a new commit is pushed, the previous run will be cancelled.
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      # Don't cancel all jobs if one fails. We want to see the results for all SDKs.
      fail-fast: false
      matrix:
        include:
          - name: Official Dev
            fw-name: official-dev
            sdk-channel: dev
            sdk-hw-target: f7

          - name: Official Release
            fw-name: official-release
            sdk-channel: release
            sdk-hw-target: f7

          - name: Momentum Dev
            fw-name: momentum-dev
            sdk-index-url: https://up.momentum-fw.dev/firmware/directory.json
            sdk-channel: dev
            sdk-hw-target: f7

          - name: Momentum Release
            fw-name: momentum-release
            sdk-index-url: https://up.momentum-fw.dev/firmware/directory.json
            sdk-channel: release
            sdk-hw-target: f7

    name: "Build for ${{ matrix.name }}"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build FAP with ufbt
        uses: flipperdevices/flipperzero-ufbt-action@v0.1.3
        id: build-app
        with:
          sdk-channel: ${{ matrix.sdk-channel }}
          sdk-index-url: ${{ matrix.sdk-index-url }}
          sdk-hw-target: ${{ matrix.sdk-hw-target }}

      - name: Rename FAP files
        run: |
          mkdir -p dist
          for fap_path in ${{ steps.build-app.outputs.fap-artifacts }}; do
            if [[ "$fap_path" == *.fap ]]; then
              filename=$(basename "$fap_path")
              fap_name="${filename%.fap}"
              new_name="${fap_name}_${{ matrix.fw-name }}.fap"
              cp "$fap_path" "dist/$new_name"
              echo "Created: $new_name"
            fi
          done

      - name: Upload artifacts
        uses: actions/upload-artifact@v4.6.2
        with:
          name: ${{ matrix.fw-name }}-build
          path: dist/

  release:
    # This job only runs on pushes to the 'main' branch, after all build jobs succeed.
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4.3.0
        with:
          path: artifacts

      - name: Prepare release
        run: |
          mkdir -p release
          find artifacts -name "*.fap" -exec cp {} release/ \;
          echo "### Built Files" > release_notes.md
          ls release/*.fap | sort | xargs -I {} basename {} | sed 's/^/- /' >> release_notes.md

      - name: Create release
        uses: softprops/action-gh-release@v2.3.2
        with:
          tag_name: latest
          name: Latest Build
          body_path: release_notes.md
          prerelease: true
          files: release/*.fap
          make_latest: true
