# This workflow builds the Flipper Application (FAP) against multiple
# firmware SDKs to ensure compatibility. It then creates a single
# GitHub Release containing all the compiled .fap files.

name: "FAP: Build for multiple SDK sources"

on:
  push:
    branches:
      - main
  pull_request:
  schedule:
    # Run once a day at 01:01 UTC
    - cron: "1 1 * * *"

# Ensures that only one workflow run for a given branch/ref is running at a time.
# If a new commit is pushed, the previous run will be cancelled.
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write

jobs:
  check-sdk-changes:
    runs-on: ubuntu-latest
    outputs:
      should-build: ${{ steps.check.outputs.should-build }}
      sdk-versions: ${{ steps.check.outputs.sdk-versions }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check SDK versions
        id: check
        run: |
          # Get current SDK versions
          echo "Checking Official SDK versions..."
          OFFICIAL_DEV=$(curl -s "https://update.flipperzero.one/firmware/directory.json" | jq -r '.channels.dev.versions[0].version')
          OFFICIAL_RELEASE=$(curl -s "https://update.flipperzero.one/firmware/directory.json" | jq -r '.channels.release.versions[0].version')

          echo "Checking Momentum SDK versions..."
          MOMENTUM_DEV=$(curl -s "https://up.momentum-fw.dev/firmware/directory.json" | jq -r '.channels.dev.versions[0].version')
          MOMENTUM_RELEASE=$(curl -s "https://up.momentum-fw.dev/firmware/directory.json" | jq -r '.channels.release.versions[0].version')

          CURRENT_VERSIONS="official-dev:$OFFICIAL_DEV,official-release:$OFFICIAL_RELEASE,momentum-dev:$MOMENTUM_DEV,momentum-release:$MOMENTUM_RELEASE"
          echo "Current versions: $CURRENT_VERSIONS"
          echo "sdk-versions=$CURRENT_VERSIONS" >> $GITHUB_OUTPUT

          # Check if we have previous versions stored
          if [[ -f ".sdk-versions" ]]; then
            PREVIOUS_VERSIONS=$(cat .sdk-versions)
            echo "Previous versions: $PREVIOUS_VERSIONS"
            
            if [[ "$CURRENT_VERSIONS" != "$PREVIOUS_VERSIONS" ]]; then
              echo "SDK versions changed! Building..."
              echo "should-build=true" >> $GITHUB_OUTPUT
            else
              echo "No SDK changes detected."
              echo "should-build=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "No previous version file found. Building..."
            echo "should-build=true" >> $GITHUB_OUTPUT
          fi

          # Store current versions
          echo "$CURRENT_VERSIONS" > .sdk-versions

      - name: Commit version tracking
        if: steps.check.outputs.should-build == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .sdk-versions
          git diff --staged --quiet || git commit -m "chore: update SDK version tracking"
          git push

  build:
    needs: check-sdk-changes
    if: needs.check-sdk-changes.outputs.should-build == 'true'
    runs-on: ubuntu-latest
    strategy:
      # Don't cancel all jobs if one fails. We want to see the results for all SDKs.
      fail-fast: false
      matrix:
        include:
          - name: Official Dev
            fw-name: official-dev
            sdk-channel: dev
            sdk-hw-target: f7

          - name: Official Release
            fw-name: official-release
            sdk-channel: release
            sdk-hw-target: f7

          - name: Momentum Dev
            fw-name: momentum-dev
            sdk-index-url: https://up.momentum-fw.dev/firmware/directory.json
            sdk-channel: dev
            sdk-hw-target: f7

          - name: Momentum Release
            fw-name: momentum-release
            sdk-index-url: https://up.momentum-fw.dev/firmware/directory.json
            sdk-channel: release
            sdk-hw-target: f7

    name: "Build for ${{ matrix.name }}"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build FAP with ufbt
        uses: flipperdevices/flipperzero-ufbt-action@v0.1.3
        id: build-app
        with:
          sdk-channel: ${{ matrix.sdk-channel }}
          sdk-index-url: ${{ matrix.sdk-index-url }}
          sdk-hw-target: ${{ matrix.sdk-hw-target }}

      - name: Rename FAP files
        run: |
          mkdir -p dist
          for fap_path in ${{ steps.build-app.outputs.fap-artifacts }}; do
            if [[ "$fap_path" == *.fap ]]; then
              filename=$(basename "$fap_path")
              fap_name="${filename%.fap}"
              new_name="${fap_name}_${{ matrix.fw-name }}.fap"
              cp "$fap_path" "dist/$new_name"
              echo "Created: $new_name"
            fi
          done

      - name: Upload artifacts
        uses: actions/upload-artifact@v4.6.2
        with:
          name: ${{ matrix.fw-name }}-build
          path: dist/

  release:
    # This job runs on pushes to main OR when SDK changes are detected on schedule
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
      (github.event_name == 'schedule' && needs.check-sdk-changes.outputs.should-build == 'true')
    needs: [check-sdk-changes, build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4.3.0
        with:
          path: artifacts

      - name: Prepare release
        id: prepare
        run: |
          mkdir -p release
          find artifacts -name "*.fap" -exec cp {} release/ \;

          # Generate timestamp-based tag
          TIMESTAMP=$(date -u +"%Y%m%d-%H%M%S")
          TAG_NAME="build-${TIMESTAMP}"
          echo "tag_name=${TAG_NAME}" >> $GITHUB_OUTPUT

          # Create release notes
          echo "### Built Files" > release_notes.md
          echo "" >> release_notes.md
          ls release/*.fap | sort | xargs -I {} basename {} | sed 's/^/- /' >> release_notes.md
          echo "" >> release_notes.md

          if [[ "${{ github.event_name }}" == "schedule" ]]; then
            echo "**Trigger:** SDK Update Detected" >> release_notes.md
            echo "**SDK Versions:** ${{ needs.check-sdk-changes.outputs.sdk-versions }}" >> release_notes.md
          else
            echo "**Trigger:** Repository Update" >> release_notes.md
          fi

          echo "**Commit:** \`${{ github.sha }}\`" >> release_notes.md
          echo "**Built on:** $(date -u)" >> release_notes.md

      - name: Create release
        uses: softprops/action-gh-release@v2.3.2
        with:
          tag_name: ${{ steps.prepare.outputs.tag_name }}
          name: "Build ${{ steps.prepare.outputs.tag_name }}"
          body_path: release_notes.md
          draft: false
          prerelease: false
          files: release/*.fap
          make_latest: true
          generate_release_notes: true
